#!/bin/bash

#-----------------------------------------------------------------------------------------------------
mlnx_cmnd="$1"
mlnx_prm1="$2"
mlnx_prm2="$3"
mlnx_prm3="$4"
mlnx_prm4="$5"
mlnx_prm5="$6"
mlnx_prm6="$7"

#-----------------------------------------------------------------------------------------------------
[ "x$MLNX_DEBUG" == 'x' ] && MLNX_DEBUG=no
MLNX_DEPLOY_ENABLE_E_IPOIB=yes
MLNX_E_IPOIB_POST_START_DELAY=0
MLNX_E_IPOIB_VF_GENERATE_MAC_ADDR=yes
MLNX_DEPLOY_MODE_PORT0=ib
MLNX_DEPLOY_MODE_PORT1=ib
MLNX_DEPLOY_VF_NUM=8
MLNX_RENAME_E_IPOIB_DEVICE=yes
MLNX_POST_DEPLOY_DELAY=5

#-----------------------------------------------------------------------------------------------------
mlnx_util=`basename $0`
mlnx_deploy='mellanox-ofed-deploy'
mlnx_config='mellanox-config-tools'
ubuntu_current_os_release=`lsb_release -r 2> /dev/null | \
                              tr '\t' ' ' | \
                              sed -e 's/^.*elease: *//' \
                                  -e 's/ *$//'`
[ "x$ubuntu_current_os_release" == 'x' ] && ubuntu_current_os_release=undefined
exec 3>/dev/null
[ "x$MLNX_DEBUG" == 'xyes' ] && exec 3>&2
mellanox_dir_home=/opt/mellanox
mellanox_dir_bin=$mellanox_dir_home/bin
mellanox_dir_var=$mellanox_dir_home/var
mellanox_deploy_util=$mellanox_dir_bin/$mlnx_deploy
mellanox_config_util=/usr/bin/$mlnx_config
mellanox_ofed_version_deploy=ofed-deploy
mellanox_ofed_version_installed=ofed-installed
mellanox_ofed_deploy_version=$mellanox_dir_var/$mellanox_ofed_version_deploy
mellanox_maas_config_ofed_deploy_version=/usr/share/maas/web/static/mellanox/$mellanox_ofed_version_deploy
mellanox_maas_curtin_userdata=/etc/maas/preseeds/curtin_userdata
apt_repository_openstack_list=/etc/apt/sources.list.d/mellanox-openstack-repository.list
apt_repository_ofed_list=/etc/apt/sources.list.d/mellanox-ofed-repository.list
apt_repository_base_url=http://bgate.mellanox.com/openstack
apt_repository_name_openstack=openstack-mellanox
apt_repository_component_openstack=main
apt_repository_name_ofed=ofed-mellanox
apt_repository_ofed_installed_status=$mellanox_dir_var/$mellanox_ofed_version_installed
apt_repository_component_ofed=main
apt_repository_openstack_template="# Mellanox Openstack Repository
deb [arch=amd64] <%MLNX_BASE_URL%>/<%OPENSTACK_RELEASE%>/ubuntu/<%UBUNTU_VERSION%> <%MLNX_REPO_NAME_OPENSTACK%> <%MLNX_REPO_COMP_OPENSTACK%>"
apt_repository_ofed_template="# Mellanox OFED Repository
deb [arch=amd64] <%MLNX_BASE_URL%>/ofed-cloud/<%OFED_VERSION%>/ubuntu/<%UBUNTU_VERSION%> <%MLNX_REPO_NAME_OFED%> <%MLNX_REPO_COMP_OFED%>"
ubuntu_supported_version=(
        14.04
)
ofed_default_version=2.3-2.0.8
ofed_supported_version=(
        2.3-2.0.8
        2.4-2.0.3
        3.1-0.0.7
)
openstack_supported_release=(
        kilo
        liberty
)
debs_ofed_remove=(
        openibd-eth-ipoib-fix mlnx-fw-updater
        ar_mgr ar-mgr cc_mgr cc-mgr compat-dapl1 compat-dapl-dev
        dapl1 dapl1-utils dapl2-utils dapl-dev dump_pr dump-pr ibacm
        ibacm-dev ibsim ibsim-utils ibutils ibutils2 ibverbs-utils
        infiniband-diags libdapl2 libdapl-dev libibcm libibcm1 libibcm-dev
        libibdm1 libibdm-dev libibmad libibmad1 libibmad-dev libibmad-devel
        libibmad-static libibumad libibumad1 libibumad-dev libibumad-devel
        libibumad-static libibverbs libibverbs1 libibverbs1-dbg libibverbs-dev
        libipathverbs1 libipathverbs1-dbg libipathverbs-dev libmlx4 libmlx4-1
        libmlx4-1-dbg libmlx4-dev libmlx5 libmlx5-1 libmlx5-1-dbg libmlx5-dev
        libopensm libopensm2 libopensm2-dev libopensm-dev libopensm-devel
        librdmacm librdmacm1 librdmacm1-dbg librdmacm-dev libsdp1 libumad2sim0
        mlnx-ofed-kernel-dkms mlnx-ofed-kernel-utils ofed-docs ofed-scripts
        opensm opensm-libs opensm-doc perftest rdmacm-utils rds-tools sdpnetstat
        srptools mft kernel-mft-dkms mft-compat mft-devel mft-devmon mft-devmondb
        mft-int mft-tests mstflint mxm fca openmpi openshmem mpitests knem
        knem-dkms ummunotify ummunotify-dkms libvma mlnx-en srptools iser-dkms
        isert-dkms srp-dkms libmthca-dev libmthca1 libmthca1-dbg
)
debs_ofed_install=(
        python-libxml2
        ofed-scripts mlnx-ofed-kernel-utils mlnx-ofed-kernel-dkms iser-dkms
        srp-dkms libibverbs1 ibverbs-utils libibverbs-dev libibverbs1-dbg
        libmlx4-1 libmlx4-dev libmlx4-1-dbg libmlx5-1 libmlx5-dev libmlx5-1-dbg
        libibumad libibumad-static libibumad-devel ibacm ibacm-dev librdmacm1
        librdmacm-utils librdmacm-dev mstflint libibmad libibmad-static
        libibmad-devel opensm libopensm opensm-doc libopensm-devel infiniband-diags
        infiniband-diags-compat infiniband-diags-guest mft kernel-mft-dkms
        libibcm1 libibcm-dev ibacm ibacm-dev perftest ibutils2 libibdm1 ibutils
        cc-mgr ar-mgr dump-pr ibsim ibsim-doc mxm fca openmpi mpitests knem
        knem-dkms rds-tools libdapl2 dapl2-utils libdapl-dev libvma srptools
        mc mlnx-fw-updater openibd-eth-ipoib-fix
)
mlnx_openib_conf=/etc/infiniband/openib.conf
mlnx_opensm_conf=/etc/opensm/opensm.conf
mlnx_opensm_exec=/usr/sbin/opensm
mlnx_opensm_partitions_conf=/etc/opensm/partitions.conf
mlnx_connectx_port_config_bin=/sbin/connectx_port_config
default_grub=/etc/default/grub
mlnx_fw_sriov_home=/opt/mellanox/mlnx-fw-updater/firmware
mlnx_fw_sriov_disable=$mlnx_fw_sriov_home/mlxfwmanager_sriov_dis_x86_64
mlnx_fw_sriov_enable=$mlnx_fw_sriov_home/mlxfwmanager_sriov_en_x86_64
sysctl_conf_no_apply=no
sysctl_conf_file=/etc/sysctl.conf
interfaces_file=/etc/network/interfaces
mlnx_deploy_vf_default=8
mlx4_core_conf_file=/etc/modprobe.d/mlx4_core.conf
mlx4_core_header_string="# Configuration of Mellanox module mlx4_core"
mlx4_core_prefix_string="options mlx4_core enable_64b_cqe_eqe=0 log_num_mgm_entry_size=-1"
mlxconfig_exec=/usr/bin/mlxconfig
mlnx_mellanox_vendor_id=15b3
mlnx_udev_log_level=debug
mlnx_udev_namer_rules_content="ATTRS{idVendor}!=\"$mlnx_mellanox_vendor_id\", GOTO=\"mellanox_net_names_generator_end\"
ACTION!=\"add\", GOTO=\"mellanox_net_names_generator_end\"
SUBSYSTEM!=\"net\", GOTO=\"mellanox_net_names_generator_end\"
ENV{MATCHADDR}=\"\"
ENV{MATCHID}=\"\"
ENV{MATCHDEVID}=\"\"
ENV{MATCHIFTYPE}=\"\"
ENV{INTERFACE_NAME}=\"\"
ENV{INTERFACE_NEW}=\"\"
PROGRAM=\"$mellanox_config_util udev-namer '\$attr{address}'\", NAME=\"%c\"
LABEL=\"mellanox_net_names_generator_end\""
mlnx_udev_persistent_net_rules_file=/etc/udev/rules.d/70-persistent-net.rules
mlnx_udev_mellanox_save_rules_file=/etc/udev/rules.d/75-mellanox-saved.rules
mlnx_udev_namer_rules_file=/etc/udev/rules.d/80-mellanox-names.rules
mlnx_prefix_infiniband=ib
mlnx_prefix_ethernet_ipoib=mi
mlnx_prefix_ethernet=me
mlnx_prefix_port=p
mlnx_prefix_virtual_function=f
mlnx_mst_exec=/usr/bin/mst
mlnx_mac_addr_prefix=fe

#-----------------------------------------------------------------------------------------------------
function print_error_end_exit () {
  echo "Error: $1" 1>&2
  exit 1
}

function print_message_end_exit () {
  echo "$1" 1>&2
  exit 0
}

function print_debug_message () {
  { echo "$1" 1>&2; } >&3 2>&1
}

function is_enable_disable () {
  option_name=$1
  option_value=$2
  [ "x$option_value" != 'xenable' -a \
    "x$option_value" != 'xdisable' ] && \
      print_error_end_exit "Not supported $option_name mode '$option_value', use enable|disable"
}

function is_ubuntu_supported () {
  ubuntu_version=$1
  is_supported=no
  for v in ${ubuntu_supported_version[@]}; do
    if [ "x$v" == "x$ubuntu_version" ]; then
      is_supported=yes
      break
    fi
  done
  [ "x$is_supported" != 'xyes' ] && \
    print_error_end_exit "Not supported Ubuntu version '$ubuntu_version'"
  return 0
}

function is_openstack_supported () {
  openstack_release=$1
  is_supported=no
  for v in ${openstack_supported_release[@]}; do
    if [ "x$v" == "x$openstack_release" ]; then
      is_supported=yes
      break
    fi
  done
  [ "x$is_supported" != 'xyes' ] && \
    print_error_end_exit "Not supported Openstack release '$openstack_release'"
  return 0
}

function is_ofed_supported () {
  ofed_version=$1
  is_supported=no
  for v in ${ofed_supported_version[@]}; do
    if [ "x$v" == "x$ofed_version" ]; then
      is_supported=yes
      break
    fi
  done
  [ "x$is_supported" != 'xyes' ] && \
    print_error_end_exit "Not supported OFED version '$ofed_version'"
  return 0
}

function create_apt_repository () {
  apt_repository_list=$1
  {
    sed -e "s|<%MLNX_BASE_URL%>|$apt_repository_base_url|g" \
        -e "s|<%OPENSTACK_RELEASE%>|$openstack_release|g" \
        -e "s|<%UBUNTU_VERSION%>|$ubuntu_version|g" \
        -e "s|<%MLNX_REPO_NAME_OPENSTACK%>|$apt_repository_name_openstack|g" \
        -e "s|<%MLNX_REPO_COMP_OPENSTACK%>|$apt_repository_component_openstack|g" \
        -e "s|<%OFED_VERSION%>|$ofed_version|g" \
        -e "s|<%MLNX_REPO_NAME_OFED%>|$apt_repository_name_ofed|g" \
        -e "s|<%MLNX_REPO_COMP_OFED%>|$apt_repository_component_ofed|g"
    echo
  } 2> /dev/null > $apt_repository_list

  {
    printf "\nCreated repository file '$apt_repository_list'\n"
    echo "Content:"
    cat $apt_repository_list
    printf "\n\n"
  } >&3 2>&1
}

function configure_ofed_apt_repository () {
  ubuntu_version=$1
  ofed_version=$2

  [ "x$ubuntu_version=" == 'x' -o \
    "x$ofed_version=" == 'x' ] && \
      print_error_end_exit "Not provided required parameters"

  is_ofed_supported "$ofed_version" && \
    echo "$apt_repository_ofed_template" | \
      create_apt_repository "$apt_repository_ofed_list"
}

function configure_openstack_apt_repository () {
  ubuntu_version=$1
  openstack_version=$2

  [ "x$ubuntu_version=" == 'x' -o \
    "x$openstack_version=" == 'x' ] && \
      print_error_end_exit "Not provided required parameters"

  is_openstack_supported "$openstack_version" && \
    echo "$apt_repository_openstack_template" | \
      create_apt_repository "$apt_repository_openstack_list"
}

function ofed_install () {
  apt-get update >&3 2>&1
  echo INSTALL NEW PACKAGES:
  for p in ${debs_ofed_install[@]}; do
    echo "  installing $p"
    apt-get install -y --force-yes $p >&3 2>&1
  done
}

function ofed_bundle_deploy () {
  {
    if [ -f "$mellanox_deploy_util" ]; then
      chmod +x "$mellanox_deploy_util"
      rm -fv "$mellanox_config_util"
      ln -s "$mellanox_deploy_util" "$mellanox_config_util"
    fi
  } >&3 2>&1

  ofed_version="$mlnx_prm1"
  if [ "x$ofed_version" == 'x' ]; then
    if [ -f "$mellanox_ofed_deploy_version" ]; then
      ofed_version=`cat "$mellanox_ofed_deploy_version" 2> /dev/null | \
                      head -1 | \
                      tr '\t' ' ' | \
                      sed -e 's/^ *//' \
                          -e 's/ *$//'`
    fi
  fi

  [ "x$ofed_version" == 'x' ] && ofed_version=$ofed_default_version
  is_ofed_supported "$ofed_version"

  mode_e_ipoib=disable
  [ "x$MLNX_DEPLOY_ENABLE_E_IPOIB" == 'xyes' ] && mode_e_ipoib=enable

  mode_port_0=ib
  [ "x$MLNX_DEPLOY_MODE_PORT0" == 'xeth' ] && mode_port_0=eth

  mode_port_1=ib
  [ "x$MLNX_DEPLOY_MODE_PORT1" == 'xeth' ] && mode_port_1=eth

  num_vf=`expr "$MLNX_DEPLOY_VF_NUM" \+ 0 2> /dev/null`
  [ "x$num_vf" == 'x' ] && num_vf=$mlnx_deploy_vf_default

  echo "MST STOP"
  mst stop

  echo "OPENSMD STOP"
  opensmd stop

  echo "OPENIBD STOP"
  openibd stop

  echo "CONFIGURE MELLANOX OFED REPOSITORY: Ubuntu=${ubuntu_current_os_release}, Ofed=${ofed_version}"
  configure_ofed_apt_repository "$ubuntu_current_os_release" "$ofed_version"

  echo "INSTALL OFED"
  ofed install

  echo "SRIOV - KERNEL SUPPORT ENABLE"
  sriov enable

  echo "SRIOV - FIRMWARE SUPPORT ENABLE"
  sriov_fw enable

  echo "E_IPOIB ENABLE"
  e_ipoib "$mode_e_ipoib"

  delay=`expr "$MLNX_E_IPOIB_POST_START_DELAY" \+ 0 2>/dev/null`
  [ "x$delay" == 'x' ] && delay=0
  echo "SET E_IPOIB POST START DELAY = $delay sec"
  e_ipoib_post_start_delay "$delay"

  echo "CONFIGURE MELLANOX MODPROBE, SET: Mode=${mode_port_0}:${mode_port_1}, Vf=$num_vf"
  set_vf_type_num "$mode_port_0" "$mode_port_1" "$num_vf"

  echo "MELLANOX UDEV NAMER ENABLE"
  udev_namer_rules enable

  echo "OPENIBD AUTOSTART ENABLE"
  openibd enable

  echo "OPENIBD RESTART"
  openibd restart

  echo "OPENIBD STOP"
  openibd stop

  echo "DONE"
  delay=`expr "$MLNX_POST_DEPLOY_DELAY" \+ 0 2>/dev/null`
  [ "x$delay" == 'x' ] && delay=0
  sleep $delay
}

function ofed_remove () {
  echo REMOVE OLD PACKAGES:
  for p in ${debs_ofed_remove[@]}; do
    echo "  removing $p"
    apt-get remove -y $p >&3 2>&1
  done
}

function ofed () {
  ofed_command=$1
  [ "x$ofed_command" != 'xinstall' -a \
    "x$ofed_command" != 'xremove' ] && \
      print_error_end_exit "Not supported ofed command '$ofed_command', use install|remove"

  case "$ofed_command" in
    install)
      ofed_repo_configured=no
      ofed_require_repo=$apt_repository_name_ofed
      ofed_require_version=''

      if [ -f "$apt_repository_ofed_list" ]; then
        ofed_require_version=`cat "$apt_repository_ofed_list" 2>/dev/null | \
                                egrep '\/ofed-cloud\/.*\/ubuntu\/' | \
                                sed -e 's|^.*\/ofed-cloud\/\(.*\)\/ubuntu\/.*$|\1|'`
        [ "x$ofed_require_version" != 'x' ] && ofed_repo_configured=yes
      fi

      [ "x$ofed_repo_configured" != 'xyes' ] && \
        print_error_end_exit "Mellanox repository not configured"

      is_ofed_supported "$ofed_require_version"

      ofed_installed=no
      ofed_installed_repo=''
      ofed_installed_version=''

      if [ -f "$apt_repository_ofed_installed_status" ]; then
        ofed_current=`cat "$apt_repository_ofed_installed_status" | \
                        head -1 | \
                        awk -F \| '{printf("ofed_installed_repo=%s;ofed_installed_version=%s;\n",$1,$2);}'`

        eval "$ofed_current" > /dev/null 2>&1
        [ "x$ofed_installed_repo" == "x$ofed_require_repo" -a \
          "x$ofed_installed_version" == "x$ofed_require_version" ] && \
             ofed_installed=yes
      fi

      if [ "x$ofed_installed" == 'xyes' ]; then
        echo "Mellanox OFED version '$ofed_installed_version' already installed"

      else
        ofed_remove
        ofed_install
        ofed_dir_status=`dirname "$apt_repository_ofed_installed_status"`
        mkdir -pv "$ofed_dir_status" > /dev/null 2>&1
        echo "$ofed_require_repo|$ofed_require_version" > "$apt_repository_ofed_installed_status"
      fi
      ;;
    remove)
      ofed_remove
      ;;
  esac
}

function e_ipoib () {
  e_ipoib_mode=$1
  is_enable_disable 'E_IPOIB' "$e_ipoib_mode"

  e_ipoib=no
  [ "x$e_ipoib_mode" == 'xenable' ] && e_ipoib=yes

  tmp_conf=/tmp/`basename $mlnx_openib_conf`

  {
    cat "$mlnx_openib_conf" 2> /dev/null | \
      tr '\t' ' ' | \
        sed -e '/E_IPOIB_LOAD/d'
    echo "E_IPOIB_LOAD=$e_ipoib"
  } > "$tmp_conf"

  {
    rm -fv "$mlnx_openib_conf"
    mv -fv "$tmp_conf" "$mlnx_openib_conf"
  } > /dev/null 2>&1

  {
    printf "\nCreated openibd config file '$mlnx_openib_conf'\n"
    echo "Content:"
    cat $mlnx_openib_conf
    printf "\n\n"
  } >&3 2>&1

}

function e_ipoib_post_start_delay () {

  e_ipoib_delay=$1
  e_ipoib_delay=`expr "$e_ipoib_delay" \+ 0 2> /dev/null`
  [ "x$e_ipoib_delay" == 'x' ] && \
    print_error_end_exit "Not E_IPOIB post start delay '$1' is not integer"

  tmp_conf=/tmp/`basename $mlnx_openib_conf`

  {
    cat "$mlnx_openib_conf" 2> /dev/null | \
      tr '\t' ' ' | \
        sed -e '/POST_START_DELAY/d'
    echo "POST_START_DELAY=$e_ipoib_delay"
  } > "$tmp_conf"

  {
    rm -fv "$mlnx_openib_conf"
    mv -fv "$tmp_conf" "$mlnx_openib_conf"
  } > /dev/null 2>&1

  {
    printf "\nCreated openibd config file '$mlnx_openib_conf'\n"
    echo "Content:"
    cat $mlnx_openib_conf
    printf "\n\n"
  } >&3 2>&1

}

function service_mgm () {
  service_name=$1
  service_command=$2
  [ "x$service_command" != 'xenable' -a \
    "x$service_command" != 'xdisable' -a \
    "x$service_command" != 'xrestart' -a \
    "x$service_command" != 'xstop' -a \
    "x$service_command" != 'xstart' ] && \
      print_error_end_exit "Not supported $service_name command '$service_command', use enable|disable|restart|stop|start"

  case "$service_command" in
    restart|stop|start)
      service $service_name $service_command >&3 2>&1
      ;;
    enable)
     update-rc.d $service_name defaults >&3 2>&1
      ;;
    disable)
      update-rc.d -f $service_name remove >&3 2>&1
      ;;
    *)
      ;;
  esac
}

function opensmd () {
    service_mgm 'opensmd' "$1"
}

function openibd () {
    service_mgm 'openibd' "$1"
}

function mst () {
    service_mgm 'mst' "$1"
}

function pk_to_vlan_map () {
  vlan_min="$1"
  [ "x$vlan_min" == 'x'  ] && \
    print_error_end_exit "Not specified VLAN minimum parameter"
  vlan_min=`expr "$vlan_min" \+ 0 2> /dev/null`
  [ "x$vlan_min" == 'x'  ] && \
    print_error_end_exit "Specified not correct VLAN minimum parameter '$1'"

  vlan_max="$2"
  [ "x$vlan_max" == 'x'  ] && \
    print_error_end_exit "Not specified VLAN maximum parameter"
  vlan_max=`expr "$vlan_max" \+ 0 2> /dev/null`
  [ "x$vlan_max" == 'x' ] && \
      print_error_end_exit "Specified not correct VLAN maximum parameter '$2'"
  [ $vlan_max \< $vlan_min ] && \
      print_error_end_exit "Specified not correct VLAN maximum parameter '$2'"

  pk_min=1
  [ "x$3" != "x" ] && pk_min="$3"
  pk_min=`expr "$pk_min" \+ 0 2> /dev/null`
  [ "x$pk_min" == 'x'  ] && \
    print_error_end_exit "Specified not correct PK minimum parameter '$3'"

  [ -x $mlnx_opensm_exec ] || \
    print_error_end_exit "Not found required executable file '$mlnx_opensm_exec'"

  {
    mkdir -pv \
      `dirname "$mlnx_opensm_conf" 2> /dev/null` \
      `dirname "$mlnx_opensm_partitions_conf" 2> /dev/null`

    rm -fv $mlnx_opensm_conf
    $mlnx_opensm_exec --allow_both_pkeys  --priority 1 --create-config $mlnx_opensm_conf
  } > /dev/null 2>&1

  {
    printf "\nCreated opensm file '$mlnx_opensm_conf'\n"
    echo "Content:"
    cat $mlnx_opensm_conf
    printf "\n\n"
  } >&3 2>&1

  {
    echo "management=0x7fff,ipoib, sl=0, defmember=full: ALL, ALL_SWITCHES=full,SELF=full;"

    pk=$pk_min
    for (( vlan=$vlan_min; vlan<=$vlan_max; vlan++ )); do
      printf "vlan%s=0x%x, ipoib, sl=0, defmember=full: ALL_CAS;\n" $vlan $pk
      pk=`expr $pk \+ 1`
    done
  } 2> /dev/null > $mlnx_opensm_partitions_conf

  {
    printf "\nCreated opensm partitions file '$mlnx_opensm_partitions_conf'\n"
    echo "Content:"
    cat $mlnx_opensm_partitions_conf
    printf "\n\n"
  } >&3 2>&1
}

function connectx_port_config () {
  port_0_mode=$1
  port_1_mode=$2

  [ -x $mlnx_connectx_port_config_bin ] || \
    print_error_end_exit "Not found required executable file '$mlnx_connectx_port_config_bin'"

  [ "x$port_0_mode" == 'x' ] && \
    print_error_end_exit "Not specified mode for port 0"

  [ "$port_0_mode" != 'ib' -a \
    "$port_0_mode" != 'eth' ] && \
      print_error_end_exit "Specified not supported mode '$port_0_mode' for port 0, use <ib|eth>"

  [ "x$port_1_mode" == 'x' ] && \
    print_error_end_exit "Not specified mode for port 1"

  [ "$port_1_mode" != 'ib' -a \
    "$port_1_mode" != 'eth' ] && \
      print_error_end_exit "Specified not supported mode '$port_1_mode' for port 1, use <ib|eth>"

  $mlnx_connectx_port_config_bin -c $port_0_mode,$port_1_mode >&3 2>&1
}

function maas_set_ofed_version () {
  ofed_version=$1

  [ "x$ofed_version" == 'x' ] && ofed_version=$ofed_default_version

  is_ofed_supported "$ofed_version"
  mlnx_dir=`dirname "$mellanox_maas_config_ofed_deploy_version" 2> /dev/null`

  if [ "x$mlnx_dir" != 'x' ]; then
    mkdir -pv "$mlnx_dir" >&3 2>&1
    echo "$ofed_version" > "$mellanox_maas_config_ofed_deploy_version"
  fi
}

function sriov () {
  sriov_mode=$1
  [ "x$sriov_mode" != 'xenable' -a \
    "x$sriov_mode" != 'xdisable' ] && \
      print_error_end_exit "Not supported SRIOV mode '$sriov_mode', use enable|disable"

  iion='intel_iommu=on'
  if [ -f "$default_grub" ]; then
    {
      cat "$default_grub" 2> /dev/null | \
        while read line; do

          line_output=''
          GRUB_CMDLINE_LINUX=''
          line_iommu=`echo "$line" | \
                        tr '\t' ' ' | \
                        tr '\n' ' ' | \
                        sed -e 's/^ *//' \
                            -e 's/ *$//'`

          if [ "x$line_iommu" == 'x' ]; then
            line_output="$line"

          else
            line_iommu=`echo "$line_iommu" | \
                          sed -e '/^ *GRUB_CMDLINE_LINUX *=/d'`

            if [ "x$line_iommu" != 'x' ]; then
              line_output="$line"

            else
              eval "$line" > /dev/null 2>&1
              GRUB_CMDLINE_LINUX=`echo "$GRUB_CMDLINE_LINUX" | \
                                    sed -e "s/$iion//g" \
                                        -e 's/^ *//' \
                                        -e 's/ *$//'`
              [ "x$sriov_mode" == 'xenable' ] && GRUB_CMDLINE_LINUX+=" $iion"
              GRUB_CMDLINE_LINUX=`echo "$GRUB_CMDLINE_LINUX" | \
                                    sed -e 's/^ *//' \
                                        -e 's/ *$//'`
              line_output="GRUB_CMDLINE_LINUX=\"$GRUB_CMDLINE_LINUX\""
            fi
          fi
          printf "$line_output\n"
      done
    } > /tmp/grub

    { rm -fv $default_grub
      mv -fv /tmp/grub $default_grub
      update-grub
    } >&3 2>&1

  fi
}

function sriov_fw () {
  sriov_mode=$1
  is_enable_disable 'SRIOV' "$sriov_mode"

  fw_update_exec=$mlnx_fw_sriov_disable
  [ "x$sriov_mode" == 'xenable' ] && fw_update_exec=$mlnx_fw_sriov_enable

  [ -x "$fw_update_exec" ] || \
      print_error_end_exit "Not found required executable file '$fw_update_exec'"

  mst start >&3 2>&1

  for device in `lspci | \
                    grep -i mellanox | \
                    sed -e '/[vV]irtual/d' | \
                    awk '{printf("%s\n",$1);}'`; do

    psid=`mstflint -d $device q 2> /dev/null | \
            grep PSID: | \
            awk '{print $NF}' | \
            head -1`

    if [ "x$psid" != 'x' ]; then

      is_psid_supported=`$fw_update_exec -l 2> /dev/null | \
                            grep "$psid"`

      [ "x$is_psid_supported" != 'x' ] && \
          $fw_update_exec -d $device -y --force --update >&3 2>&1
    fi
  done

  mst stop >&3 2>&1
}

function sysctl_conf (){
  op="$1"
  var="$2"
  val="$3"

  if [ "x$op" == "xapply" ]; then
    sysctl -e -p >&3 2>&1
  fi

  if [ "x$op" == "xunset" -a \
        "x$var" != "x" ]; then
    sed -e "/^[\t\ ]*$var[\t\ ]*=.*$/d" -i $sysctl_conf_file
    if [ "x$sysctl_conf_no_apply" != "xyes" ]; then
      sysctl_conf apply
    fi
  fi

  if [ "x$op" == "xset" -a \
        "x$var" != "x" -a \
        "x$val" != "x" ]; then
    sysctl_conf_no_apply=yes
    sval="$val"
    sysctl_conf unset "$var"
    echo "$var=$sval" >> $sysctl_conf_file
    sysctl_conf apply
    sysctl_conf_no_apply=no
  fi
}

function set_vf_type_num () {
  port_0_mode=$1
  port_1_mode=$2
  num_vfs=$3
  num_probe_vfs=$4

  [ "x$port_0_mode" == 'x' ] && \
    print_error_end_exit "Not specified mode for port 0"

  [ "$port_0_mode" != 'ib' -a \
    "$port_0_mode" != 'eth' ] && \
      print_error_end_exit "Specified not supported mode '$port_0_mode' for port 0, use <ib|eth>"

  port_0_type=1
  [ "$port_0_mode" == 'eth' ] && port_0_type=2

  [ "x$port_1_mode" == 'x' ] && \
    print_error_end_exit "Not specified mode for port 1"

  [ "$port_1_mode" != 'ib' -a \
    "$port_1_mode" != 'eth' ] && \
      print_error_end_exit "Specified not supported mode '$port_1_mode' for port 1, use <ib|eth>"

  port_1_type=1
  [ "$port_1_mode" == 'eth' ] && port_1_type=2

  if [ "x$num_vfs" == 'x' ]; then
    set_num_vfs=0
    set_num_probe_vfs=0

  else
    set_num_vfs=`expr "$num_vfs" \+ 0 2>/dev/null`
    [ "x$set_num_vfs" == 'x' ] && \
      print_error_end_exit "Specified number of VF '$num_vfs' is not number"

    set_num_vfs_save=$set_num_vfs
    set_num_vfs=`expr \( $set_num_vfs \/ 2 \+ $set_num_vfs \% 2 \) \* 2 2>/dev/null`

    [ "x$set_num_vfs" != "x$set_num_vfs" ] && \
      print_debug_message "Fixed number of VFs from '$set_num_vfs_save' to '$set_num_vfs'"

    [ "x$set_num_vfs" == 'x0' -o \
      "x$num_probe_vfs" == 'x' ] && num_probe_vfs=0

    set_num_probe_vfs=`expr "$num_probe_vfs" \+ 0 2>/dev/null`
    [ "x$set_num_probe_vfs" == 'x' ] && \
      print_error_end_exit "Specified probe of VF '$num_probe_vfs' is not number"

    [[ $set_num_probe_vfs -gt $set_num_vfs ]] && \
      print_error_end_exit "Specified probe of VF '$num_probe_vfs' must be less that number of VF '$set_num_vfs'"
  fi

  port_type_array_string=" port_type_array=$port_0_type,$port_1_type"

  num_vfs_string=''
  [ "x$set_num_vfs" != 'x0' ] && num_vfs_string=" num_vfs=$set_num_vfs"

  num_probe_vfs_string=''
  [ "x$set_num_probe_vfs" != 'x0' ] && num_probe_vfs_string=" probe_vf=$set_num_probe_vfs"

  printf "%s\n%s%s%s%s\n" \
    "$mlx4_core_header_string" \
    "$mlx4_core_prefix_string" \
    "$port_type_array_string" \
    "$num_vfs_string" \
    "$num_probe_vfs_string" > $mlx4_core_conf_file
}

function burn_vfs_in_fw () {
  num_vfs=$1

  [ -x $mlxconfig_exec ] || \
    print_error_end_exit "Not found required executable file '$mlxconfig_exec'"

  set_num_vfs=`expr "$num_vfs" \+ 0 2>/dev/null`
  [ "x$set_num_vfs" == 'x' ] && \
    print_error_end_exit "Specified number of VF '$num_vfs' is not number"

  set_num_vfs_save=$set_num_vfs
  set_num_vfs=`expr \( $set_num_vfs \/ 2 \+ $set_num_vfs \% 2 \) \* 2 2>/dev/null`

  [ "x$set_num_vfs" != "x$set_num_vfs" ] && \
    print_debug_message "Fixed number of VFs from '$set_num_vfs_save' to '$set_num_vfs'"

  openibd start >&3 2>&1
  mst start >&3 2>&1

  for dev in `$mlnx_mst_exec status | \
                grep 'pciconf' | \
                awk '{print $1}'`; do

    $mlxconfig_exec -d $dev q | \
      grep 'SRIOV' | \
      awk '{print $2}' | \
      grep '1' >&3 2>&1

    sriov_enabled=$?
    current_num_of_vfs=`$mlxconfig_exec -d $dev q | \
                          grep 'NUM_OF_VFS' | \
                          awk '{print $2}'`

    if [ "x$set_num_vfs" != "x$current_num_of_vfs" ]; then

      print_debug_message "Current allowed number of VFs is '$current_num_of_vfs', required number is '$set_num_vfs'"
      $mlxconfig_exec -y -d $dev s SRIOV_EN=1 NUM_OF_VFS=$set_num_vfs >&3 2>&1

      [ "x$?" != 'x0' ] && \
        print_debug_message "Failed changing number of VFs in FW for HCA ${dev}"

    fi

  done

  mst stop
}

function is_valid_netmask () {
    nmre='254|252|248|240|224|192|128'
    echo "$1" | \
        egrep "^($nmre)\.0\.0\.0|255\.($nmre|0)\.0\.0|255\.255\.($nmre|0)\.0|255\.255\.255\.($nmre|0)\$" > /dev/null 2>&1
    return $?
}

function is_valid_ip_address () {
    iare1='25[0-4]|2[0-4][0-9]|1[0-9][0-9]|[1]?[1-9][0-9]?'
    iare2='25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?'
    echo "$1" | \
        egrep "^($iare1)\.($iare2)\.($iare2)\.($iare2)\$" > /dev/null 2>&1
    return $?
}

function is_valid_interface_name () {
    echo "$1" | \
        egrep '^[[:alpha:]](\w|-){,15}$' > /dev/null 2>&1
    return $?
}

function is_valid_interface_alias_name () {
    echo "$1" | \
        egrep '^[[:alnum:]](\w|-){,15}$' > /dev/null 2>&1
    return $?
}

function is_interface_present () {
    ifconfig -a | \
        tr '\t' ' ' | \
        grep -i 'link  *encap' | \
        awk '{printf("%s\n",$1);}' | \
        sed -e '/[:.]/d' | \
        egrep "^$1\$" > /dev/null 2>&1
    return $?
}

function check_interface_names () {
  if_name=$1
  if_name_ext=$2

  is_valid_interface_name "$if_name" || \
    print_error_end_exit "Specified invalid interface name '$if_name'"

  is_valid_interface_alias_name "$if_name_ext" || \
    print_error_end_exit "Specified invalid interface alias '$if_name_ext'"
}

function interface () {
  op=$1
  if_name=$2
  if_name_ext=$3
  if_addr=$4
  if_mask=$5
  [ "x$op" == "xunset" ] && interface_unset "$if_name" "$if_name_ext"
  [ "x$op" == "xset" ] && interface_set "$if_name" "$if_name_ext" "$if_addr" "$if_mask"
  [ "x$op" == "xup" -o "x$op" == "xdown" ] && interface_updown "$op" "$if_name" "$if_name_ext"
}

function interface_updown () {
  op=$1
  if_name=$2
  if_name_ext=$3

  check_interface_names "$if_name" "$if_name_ext"

  'if'${op} ${if_name}:${if_name_ext} >&3 2>&1
  ifconfig ${if_name}:${if_name_ext} ${op} >&3 2>&1
}

function interface_unset () {
  if_name=$1
  if_name_ext=$2

  if [ "x$if_name" != 'x' -a \
        "x$if_name_ext" != 'x' -a \
        -f "$interfaces_file" ]; then

    check_interface_names "$if_name" "$if_name_ext"

    interface_updown 'down' "$if_name" "$if_name_ext"

    ifn="${if_name}:${if_name_ext}"
    tmp_interfaces_file=/tmp/`basename "$interfaces_file"`

    cat "$interfaces_file" 2> /dev/null | \
          tr '\n' '|' | \
          sed -e 's/auto/\nauto/g' \
              -e 's/iface/\niface/g' | \
          sed -e "/${ifn}/d" | \
          tr '\n' '|' | \
          sed -e 's/|auto/auto/g' \
              -e 's/|iface/iface/g' \
              -e 's/||*$/|/' | \
          sed -e 's/|/\n/g' > $tmp_interfaces_file

    {
      rm -fv "$interfaces_file".save
      mv -fv "$interfaces_file" "$interfaces_file".save
      mv -fv "$tmp_interfaces_file" "$interfaces_file"
    } >&3 2>&1

  fi
}

function interface_set () {
  if_name=$1
  if_name_ext=$2
  if_addr=$3
  if_mask=$4

  if [ "x$if_name" != 'x' -a \
        "x$if_name_ext" != 'x' -a \
        "x$if_addr" != 'x' -a \
        "x$if_mask" != 'x' -a \
        -f "$interfaces_file" ]; then

    check_interface_names "$if_name" "$if_name_ext"

    is_valid_ip_address "$if_addr" || \
      print_error_end_exit "Specified invalid IP address '$if_addr'"

    is_valid_netmask "$if_mask" || \
      print_error_end_exit "Specified invalid network mask '$if_name_ext'"

    interface_unset "$if_name" "$if_name_ext"

    is_interface_present "$if_name" || \
      print_error_end_exit "Specified interface '$if_name' not present"

    ifn="$if_name:$if_name_ext"
    ifa=$if_addr
    ifm=$if_mask

    {
      printf "\nauto ${ifn}\niface ${ifn} inet static"
      printf "\n    address ${ifa}\n    netmask ${ifm}\n"
    } >> "$interfaces_file"

    interface_updown 'up' "$if_name" "$if_name_ext"

  fi
}

function udev_net_rules () {
  cat \
      $mlnx_udev_persistent_net_rules_file \
      $mlnx_udev_mellanox_save_rules_file 2> /dev/null | \
    sed -e 's/#.*$//' \
        -e 's/^ *//' \
        -e 's/ *$//' \
        -e '/^$/d' | \
    while read rline; do
      NAME=''
      eline=`echo "$rline" 2> /dev/null | egrep '^.*NAME=' | sed -e 's/" *, */";/g'`
      eval "$eline" > /dev/null 2>&1
      if [ "x$NAME" != 'x' ]; then
        if [ -f "/sys/class/net/$NAME/device/vendor" ]; then
          dev_vendor_id=`cat "/sys/class/net/$NAME/device/vendor" 2> /dev/null | head -1 | sed -e 's/^ *//' -e 's/ *$//'`
          if [ "x$dev_vendor_id" != "x0x$mlnx_mellanox_vendor_id" ]; then
            iffound=no
            for i in $iflist; do
              if [ "x$i" == "x$NAME" ]; then
                iffound=yes
                break
              fi
            done
            if [ "x$iffound" != 'xyes' ]; then
              iflist+=" $NAME"
              echo "$rline"
            fi 
          fi
        fi
      fi
    done
}

function udev_namer_rules () {
  namer_mode=$1
  is_enable_disable 'Mellanox namer rules' "$namer_mode"

  net_rules=`udev_net_rules`

  if [ "x$namer_mode" == 'xenable' ]; then
    {
      echo "$mlnx_udev_namer_rules_content" > $mlnx_udev_namer_rules_file
      rm -fv $mlnx_udev_persistent_net_rules_file
      ln -s /dev/null $mlnx_udev_persistent_net_rules_file
      echo "$net_rules" > $mlnx_udev_mellanox_save_rules_file
      echo "udev_log=\"$mlnx_udev_log_level\"" > /etc/udev/udev.conf
    } >&3 2>&1
  fi

  if [ "x$namer_mode" == 'xdisable' ]; then
    {
      rm -fv $mlnx_udev_namer_rules_file
      rm -fv $mlnx_udev_mellanox_save_rules_file
      rm -fv $mlnx_udev_persistent_net_rules_file
      echo "$net_rules" > $mlnx_udev_persistent_net_rules_file
      echo "udev_log=\"info\"" > /etc/udev/udev.conf
    } >&3 2>&1
  fi

  udevadm info --cleanup-db >&3 2>&1

}

function udev_interface_name_generate () {
  {
    card_counter=-1
    vf_counter=0
    lspci | \
      grep -i Mellanox | \
        while read pci_card; do

          vf_present=`echo "$pci_card" 2> /dev/null | \
                          tr '[:upper:]' '[:lower:]' | \
                          sed -e '/virtual/d'`

          is_vf=no
          [ "x$vf_present" == 'x' ] && \
            is_vf=yes

          if [ "x$is_vf" != 'xyes' ]; then
            card_counter=`expr $card_counter \+ 1 2> /dev/null`
            vf_counter=0
          fi

          bus_id=`echo "$pci_card" 2> /dev/null | \
                      awk '{printf("%s\n",$1);}'`

          pci_bus=`find /sys/devices -maxdepth 3 -type d 2> /dev/null | \
                      egrep $bus_id'$' | \
                      sed -e 's|/sys||' | \
                      head -1`

          port_counter=0
          for port in `ls -1 /sys/devices/pci*/*/*$bus_id/mlx4_port[1-9] 2> /dev/null`; do

            port_type=`cat "$port" 2> /dev/null | \
                          head -1 | \
                          sed -e 's/auto *(//' \
                              -e 's/ *) *$//' \
                              -e 's/^ *//' \
                              -e 's/ *$//'`

            printf "%-46s 0x%01x %8s %2s %4s %3s %2s %4s\n" \
                      "$pci_bus" \
                      "$port_counter" \
                      "$bus_id" \
                      "$card_counter" \
                      "$is_vf" \
                      "$vf_counter" \
                      "$port_counter" \
                      "$port_type"

            port_counter=`expr $port_counter \+ 1 2> /dev/null`

          done

          [ "x$is_vf" == 'xyes' ] && \
              vf_counter=`expr $vf_counter \+ 1 2> /dev/null`

        done
  } 2> /dev/null | \
  {
    egrep "^ *$lspci_sys_path *$dev_id" | \
    head -1 | \
    while read rline; do

      eline=`echo "$rline" 2> /dev/null | \
                awk '{printf("card_counter=%s; is_vf=%s; vf_counter=%s; port_counter=%s; port_type=%s;\n",$4,$5,$6,$7,$8);}'`

        card_counter=''
        is_vf=''
        vf_counter=''
        port_counter=''
        port_type=''

        eval "$eline" > /dev/null 2>&1

        if [ "x$card_counter" != 'x' -a \
                "x$is_vf" != 'x' -a \
                "x$vf_counter" != 'x' -a \
                "x$port_counter" != 'x' -a \
                "x$port_type" != 'x' ]; then

            if_prefix=$mlnx_prefix_ethernet

            [ "x$port_type" == 'xib' -a  \
                "x$use_long_mac" != 'xyes' ] && \
                  if_prefix=$mlnx_prefix_ethernet_ipoib

            [ "x$use_long_mac" == 'xyes' ] && \
                if_prefix=$mlnx_prefix_infiniband

            vf_sufix=''
            [ "x$is_vf" == 'xyes' ] && \
                vf_sufix="${mlnx_prefix_virtual_function}${vf_counter}"

            if [ "x$if_prefix" == "x$mlnx_prefix_ethernet_ipoib" -a \
                    "x$MLNX_RENAME_E_IPOIB_DEVICE" != 'xyes' ]; then
                if_prefix=$INTERFACE
                card_counter=''
                mlnx_prefix_port=''
                port_counter=''
                vf_sufix=''
            fi

            if [ "x$if_prefix" == "x$mlnx_prefix_ethernet_ipoib" -a \
                 "x$is_vf" == 'xyes' -a \
                 "x$MLNX_E_IPOIB_VF_GENERATE_MAC_ADDR" == 'xyes' ]; then

                    mac_addr=`dd count=1 if=/dev/urandom bs=256 2>/dev/null | \
                                    sha1sum | \
                                    sed -e "s/^/$mlnx_mac_addr_prefix/" \
                                        -e 's/-//' \
                                        -e 's/://g' | \
                                    cut -c 1-2,3-4,5-6,7-8,9-10,11-12 \
                                        --output-delimiter=:`

                ip link set dev $INTERFACE address $mac_addr > /dev/null 2>&1

            fi

            ip link set dev $INTERFACE down > /dev/null 2>&1

            echo "${if_prefix}${card_counter}${mlnx_prefix_port}${port_counter}${vf_sufix}"

        fi
    done
  }
}

function udev_namer () {
  mac_addr=$1

  [ "x$DEVPATH" == 'x' ] && exit 1

  sys_path=/sys/${DEVPATH}
  for ((i=0; i<8; i++)); do
    [ -f "$sys_path/dev_id" ] && break
    usleep 50000
  done
  [ -f "$sys_path/dev_id" ] || exit 1

  dev_id=`cat "$sys_path/dev_id" 2> /dev/null | \
            head -1 | \
            sed -e 's/^ *//' \
                -e 's/ *$//'`

  [ "x$dev_id" == 'x' ] && exit 1

  lspci_sys_path=`echo "$DEVPATH" 2> /dev/null | \
                    sed -e 's|/net/.*||'`

  [ "x$mac_addr" == 'x' ] && exit 1

  mac_addr=`echo "$mac_addr" 2> /dev/null | \
              tr '[:lower:]' '[:upper:]' `

  long_mac_adr=`echo "$mac_addr" 2> /dev/null | \
                  sed -e '/\([0-9A-F]\{2\}[:-]\)\{6\}/d'`

  use_long_mac=no
  if [ "x$long_mac_adr" == 'x' ]; then
    use_long_mac=yes
    mac_addr=`echo "$mac_addr" 2> /dev/null | \
                  cut -b 13-`
  fi

  for ((i=0; i<3; i++)); do
    interface_name=`udev_interface_name_generate 2> /dev/null`
    if [ "x$interface_name" == 'x' ]; then
        usleep 50000
    else
        echo "$interface_name"
        break
    fi
  done
}

#-----------------------------------------------------------------------------------------------------
is_ubuntu_supported "$ubuntu_current_os_release"

if [ "x$mlnx_util" == "x$mlnx_deploy" ]; then
  ofed_bundle_deploy

else
  case "$mlnx_cmnd" in
    configure-apt-ofed)
      configure_ofed_apt_repository "$ubuntu_current_os_release" "$mlnx_prm1"
      ;;
    configure-apt-openstack)
      configure_openstack_apt_repository "$ubuntu_current_os_release" "$mlnx_prm1"
      ;;
    ofed)
      ofed "$mlnx_prm1"
      ;;
    ofed-bundle-deploy)
      ofed_bundle_deploy
      ;;
    e-ipoib)
      e_ipoib "$mlnx_prm1"
      ;;
    e-ipoib-post-start-delay)
      e_ipoib_post_start_delay "$mlnx_prm1"
      ;;
    openibd)
      openibd "$mlnx_prm1"
      ;;
    pk-to-vlan-map)
      pk_to_vlan_map "$mlnx_prm1" "$mlnx_prm2" "$mlnx_prm3"
      ;;
    opensmd)
      opensmd "$mlnx_prm1"
      ;;
    mst)
      mst "$mlnx_prm1"
      ;;
    connectx-port-config)
      connectx_port_config "$mlnx_prm1" "$mlnx_prm2"
      ;;
    maas-set-ofed-version)
      maas_set_ofed_version "$mlnx_prm1"
      ;;
    sriov)
      sriov "$mlnx_prm1"
      ;;
    sriov-fw)
      sriov_fw "$mlnx_prm1"
      ;;
    sysctl-conf)
      sysctl_conf "$mlnx_prm1" "$mlnx_prm2" "$mlnx_prm3"
      ;;
    interface)
      interface "$mlnx_prm1" "$mlnx_prm2" "$mlnx_prm3" "$mlnx_prm4" "$mlnx_prm5"
      ;;
    set-vf-type-num)
      set_vf_type_num "$mlnx_prm1" "$mlnx_prm2" "$mlnx_prm3" "$mlnx_prm4"
      ;;
    burn-vfs-in-fw)
      burn_vfs_in_fw "$mlnx_prm1"
      ;;
    udev-namer-rules)
      udev_namer_rules "$mlnx_prm1"
      ;;
    udev-namer)
      udev_namer "$mlnx_prm1"
      ;;
    help|*)
      ub_sups=`{ for v in ${ubuntu_supported_version[@]}; do printf ', %s' $v; done; } | sed -e 's/^, //'`
      of_sups=`{ for v in ${ofed_supported_version[@]}; do printf ', %s' $v; done; } | sed -e 's/^, //'`
      op_sups=`{ for v in ${openstack_supported_release[@]}; do printf ', %s' $v; done; } | sed -e 's/^, //'`
      usage_message="
Usage:

  $mlnx_util help
  $mlnx_util configure-apt-ofed <ofed-version-number>
  $mlnx_util configure-apt-openstack <openstack-release-codename>
  $mlnx_util ofed <install|remove>
  $mlnx_util ofed-bundle-deploy
  $mlnx_util e-ipoib <enable|disable>
  $mlnx_util e-ipoib-post-start-delay <num_sec>
  $mlnx_util openibd <enable|disable|restart|stop|start>
  $mlnx_util pk-to-vlan-map <vlan-min> <vlan-max> [<pk-min=1>]
  $mlnx_util opensmd <enable|disable|restart|stop|start>
  $mlnx_util mst <enable|disable|restart|stop|start>
  $mlnx_util connectx-port-config <port_0_mode> <port_1_mode>
  $mlnx_util sriov <enable|disable>
  $mlnx_util sriov-fw <enable|disable>
  $mlnx_util sysctl-conf <set|unset> <var> <val>
  $mlnx_util interface <set|unset|up|down> <if-name> <if-alias> [<ip-address> <netmask>]
  $mlnx_util set-vf-type-num <port_0_mode> <port_1_mode> [<num-vf> [<probe-vf>]]
  $mlnx_util burn-vfs-in-fw <num-vf>
  $mlnx_util udev-namer-rules <enable|disable>
  $mlnx_util udev-namer <mac-address>
  $mlnx_util maas-set-ofed-version [<ofed-version-number>]

  $mlnx_deploy [<ofed-version-number>]

Supported versions and releases:

  Ubuntu:     $ub_sups
  OFED:       $of_sups
  Openstack:  $op_sups

Supported port modes: ib|eth
"
      [ "x$mlnx_cmnd" == 'xhelp' ] && print_message_end_exit "$usage_message"
      print_error_end_exit "Unsupported command.
$usage_message"
      ;;
  esac
fi

exit 0
